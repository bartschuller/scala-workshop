First day of Scala
==================
:icons:
:corpname: Lunatech Labs
:language: scala
Bart Schuller <schuller@lunatech.com>
v. 0.1, 2011-07-31

== Today's menu

* Introduction to the Scala language
* Scala tools and resources
* Setting up your environment
* Excercises

Actually, we're going the agile route and iterate these
subjects.

****
Notes like this one only appear in the handouts. They can be
as long as you like and can presumably contain everything
you want:

No sections though.

source code:

[source]
case class Bla(blie: String)

* lists
* and much more

****

== Scala the language

* Multi-paradigmatic
* Yes, it's functional
* But also a better OO language

== Observer pattern

Java has had `java.util.Observable` since 1.0, but
it's never used

* No generics (fixable)
* It's a class (can't mix it in)

== Installing Scala

`brew install scala [--with-docs]`

== For loops

[source]
for (i <- 1 to 10) { println(i) }


== Euler problem 9

A Pythagorean triplet is a set of three natural numbers, +
a < b < c, for which,

[center]_a^2^ + b^2^ = c^2^_

For example, 3^2^ + 4^2^ = 9 + 16 = 25 = 5^2^.

There exists exactly one Pythagorean triplet for which +
a + b + c = 1000. Find the product _abc_.

== Analysis

All are Natural numbers, so > 0 +
a < b < c +
a^2^ + b^2^ = c^2^ +
a + b + c = 1000

[options="incremental"]
* a, b and c are smaller than 1000
* c = 1000 - a - b
* let's just try all a and b below 1000

== for

[source]
  def euler9 = {
    val ans =
      for (b <- 2 to 1000;  // <1>
           a <- 1 to b;     // <2>
           c = 1000 - a - b
               if c*c == a*a + b*b)
        yield a*b*c
    ans.head
  }

[options="incremental"]
<1> _b_ is a fresh variable, taking on the succesive
values 2 to 1000 inclusive
<2> This is a loop within a loop, _a_ loops from 1 to the
current value of b, so we generate all possible combinations
of a and b.

== for

[source]
  def euler9 = {
    val ans =
      for (b <- 2 to 1000;
           a <- 1 to b;
           c = 1000 - a - b // <1>
               if c*c == a*a + b*b) // <2>
        yield a*b*c
    ans.head
  }

[options="incremental"]
<1> Assignment just gives a name to an expression, we still
loop just over b, then a.
<2> An `if` statement can appear anywhere to add a
constraint to the combination of values. If not met, then inner loops and the
body are skipped.

== Last slide

That's all, folks!

// a2x: --dblatex-opt "-i /Users/schuller/texmf/tex// -P latex.output.revhistory=0 -P doc.collab.show=1"
// vim:tw=60:
